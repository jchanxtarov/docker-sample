version: "3.3"
services:
  mysql:
    build: ./mysql # 特にすることがなければ下に変更して、Dockerfileは削除して良い
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: 'Asia/Tokyo'
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
    volumes: # DockerfileのADDと同じ役割をしている気がする
      - ./mysql/data:/var/lib/mysql # データの永続化
      - ./mysql/sql:/docker-entrypoint-initdb.d # 初期化で実行するSQLをここに置くdockerの決まり
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf # mysqlの設定ファイル
      # - ./mysql/log:/var/log/mysql # ログの出力先(my.cnfとダブっているのが気になる)
    ports:
      - 3306:3306
    
  app:
    build: ./src
    volumes:
      - ./src:/src
      # - ~/.cache:/root/.cache # TODO: cacheも使ったappにしたい
    ports:
      - 5000:5000 # dockerの入り口はlocalhostの5000で受けて、docker内部のport5000に流す
    links: # depends_on: でも良さそう
      - mysql
    tty: true # コンテナが起動しっぱなしになるのでデバッグしたい時とかに便利
    environment: 
        # consider: いちいち .env から書き写すのがナンセンス
        FLASK_APP: run.py # python run.py を flask run に置き換えている
        FLASK_ENV: development
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_HOST: ${MYSQL_HOST}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        APP_PORT: ${APP_PORT}
    command: flask run -h ${APP_PORT} # 環境ごとに設定を変更する必要
    # command: make wait-mysql | flask run -h 0.0.0.

  swagger:
    image: swaggerapi/swagger-ui
    container_name: app_swagger
    volumes:
      - ./docs:/docs
    environment:
      - SWAGGER_JSON=/docs/swagger.yaml
    ports:
    - 5050:8080
